version: '3.8'

services:
  # Serviço do banco de dados PostgreSQL
  postgres:
    image: postgres:13
    container_name: licitacoes-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - licitacoes-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço de cache Redis
  redis:
    image: redis:6
    container_name: licitacoes-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - licitacoes-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço de worker Celery
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: licitacoes-celery
    restart: always
    command: celery -A app.worker.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT}
      - CORS_ORIGINS=${CORS_ORIGINS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - licitacoes-network

  # Serviço de monitoramento Celery Flower
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: licitacoes-flower
    restart: always
    command: celery -A app.worker.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - redis
      - celery
    networks:
      - licitacoes-network

  # Serviço de backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: licitacoes-backend
    restart: always
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT}
      - CORS_ORIGINS=${CORS_ORIGINS}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - licitacoes-network

  # Serviço de frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
    container_name: licitacoes-frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - licitacoes-network

  # Serviço de monitoramento Prometheus
  prometheus:
    image: prom/prometheus:v2.30.3
    container_name: licitacoes-prometheus
    restart: always
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - licitacoes-network

  # Serviço de visualização Grafana
  grafana:
    image: grafana/grafana:8.2.2
    container_name: licitacoes-grafana
    restart: always
    volumes:
      - ./deployment/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - licitacoes-network

networks:
  licitacoes-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
