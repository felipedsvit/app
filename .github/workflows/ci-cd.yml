name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Testes e Validação
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v2
      
      - name: Configurar Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      
      - name: Configurar Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      
      - name: Instalar dependências do backend
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Executar testes do backend
        run: |
          cd backend
          pytest -v
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test_secret_key
          ENVIRONMENT: test
      
      - name: Instalar dependências do frontend
        run: |
          cd frontend
          npm ci
      
      - name: Executar testes do frontend
        run: |
          cd frontend
          npm test -- --watchAll=false
      
      - name: Verificar formatação do código
        run: |
          cd backend
          pip install black
          black --check .
  
  build:
    name: Build e Push de Imagens Docker
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v2
      
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login no Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Extrair metadados para imagem do backend
        id: meta-backend
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/licitacoes-backend
          tags: |
            type=ref,event=branch
            type=sha,format=short
      
      - name: Build e push da imagem do backend
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
      
      - name: Extrair metadados para imagem do frontend
        id: meta-frontend
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/licitacoes-frontend
          tags: |
            type=ref,event=branch
            type=sha,format=short
      
      - name: Build e push da imagem do frontend
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
  
  deploy:
    name: Deploy para Ambiente de Homologação
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v2
      
      - name: Configurar SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Adicionar host conhecido
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
      
      - name: Transferir arquivos de configuração
        run: |
          scp docker-compose.prod.yml ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/sistema-licitacoes/
          scp .env.prod ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/sistema-licitacoes/.env
      
      - name: Executar deploy
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd ~/sistema-licitacoes && docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d"
  
  deploy-production:
    name: Deploy para Ambiente de Produção
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v2
      
      - name: Configurar SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
      
      - name: Adicionar host conhecido
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.DEPLOY_HOST_PROD }} >> ~/.ssh/known_hosts
      
      - name: Transferir arquivos de configuração
        run: |
          scp docker-compose.prod.yml ${{ secrets.DEPLOY_USER_PROD }}@${{ secrets.DEPLOY_HOST_PROD }}:~/sistema-licitacoes/
          scp .env.prod ${{ secrets.DEPLOY_USER_PROD }}@${{ secrets.DEPLOY_HOST_PROD }}:~/sistema-licitacoes/.env
      
      - name: Executar deploy
        run: |
          ssh ${{ secrets.DEPLOY_USER_PROD }}@${{ secrets.DEPLOY_HOST_PROD }} "cd ~/sistema-licitacoes && docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d"
